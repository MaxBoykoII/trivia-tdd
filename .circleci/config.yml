version: 2

jobs:
  build:api:
    docker:
      - image: cimg/base:2020.01
    
    working_directory: ~/repo

    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build and push api image
          command: |
            docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN
            docker pull $IMAGE:api || true
            docker build \
            --cache-from $IMAGE:api \
            --tag $IMAGE:api  \
            --file ./services/trivia/Dockerfile.prod \
            "./services/trivia"
            docker push $IMAGE:api
  
  test:api:
    docker:
      - image: $IMAGE:api
        environment:
          PGHOST: 127.0.0.1
          DATABASE_TEST_URL: postgresql://postgres:postgres@localhost:5432/trivia_test
      - image: circleci/postgres:9.6.5-alpine-ram
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: trivia_test

    working_directory: /usr/src/app

    steps:
      - run:
          name: Install postgresql-client
          command: |
            apk update
            apk add postgresql-client
      
      - run:
          name: Wait for postgres
          command: |
            echo "Waiting for postgres..."
            while ! nc -z localhost 5432; do
                sleep 0.1
            done
            echo "PostgresSQL started"

      - run:
          name: Wait for test db
          command: |
            echo "Waiting for trivia_test"
            while ! psql -U postgres -lqt | cut -d \| -f 1 | grep -qw trivia_test; do
                    sleep 0.1
            done
            echo "The test database is ready"

      - run:
          name: Seed test db
          command: |
            echo "Listing available databases..."
            psql -U postgres -l
            echo "Listed available databases"
            psql -d $DATABASE_TEST_URL -U postgres -a -f ./project/db/trivia.psql
            echo "test db has been seeded"
      - run:
          name: Test api
          command: |
            python -m unittest discover project/tests

  build:client:
    docker:
      - image: cimg/base:2020.01

    working_directory: ~/repo

    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build and push client image
          command: |
            docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN
            docker pull $IMAGE:client || true
            docker build \
            --cache-from $IMAGE:client \
            --tag $IMAGE:client  \
            --file ./services/client/Dockerfile.ci \
            "./services/client"
            docker push $IMAGE:client

  test:client:
    docker:
      - image: $IMAGE:client
    
    steps:
      - run: 
          name: Lint and test client
          command: |
            cd /usr/src/app
            npm run prettier:check
            npm run lint
            npm run test

  release:heroku:
    docker:
      - image: cimg/base:2020.01
        environment:
          HEROKU_APP_NAME: mighty-headland-23868
          HEROKU_REGISTRY_IMAGE: registry.heroku.com/mighty-headland-23868/web

    working_directory: ~/repo

    steps:
      - checkout
      - setup_remote_docker
      - run: 
          name: Install curl
          command: |
            sudo apt-get update
            sudo apt-get install curl
      - run: chmod +x ./release.sh
      - run:
          name: Build image for heroku
          command: |
            docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
            docker pull $IMAGE:build-react || true
            docker pull $IMAGE:production || true
            docker build \
            --target build-react \
            --cache-from $IMAGE:build-react \
            --tag $IMAGE:build-react \
            --file ./Dockerfile \
            "."
            docker build \
            --cache-from $IMAGE:production \
            --tag $IMAGE:production \
            --tag $HEROKU_REGISTRY_IMAGE \
            --file ./Dockerfile \
            "."
            docker push $IMAGE:build-react
            docker push $IMAGE:production
      - run: 
          name: Push image to heroku registry
          command: |
            docker login -u _ -p $HEROKU_AUTH_TOKEN registry.heroku.com
            docker push $HEROKU_REGISTRY_IMAGE
            ./release.sh


  
workflows:
  version: 2
  build-test-deploy:
    jobs:
      - build:client
      - test:client:
          requires:
            - build:client
      - build:api
      - test:api:
          requires:
            - build:api
      - release:heroku:
          requires:
            - build:client
            - test:client
            - build:api
            - test:api
